examples_list = {
  'core': [
    'core/core_2d_camera',
    'core/core_2d_camera_mouse_zoom',
    'core/core_2d_camera_platformer',
    'core/core_2d_camera_split_screen',
    'core/core_3d_camera_first_person',
    'core/core_3d_camera_free',
    'core/core_3d_camera_mode',
    'core/core_3d_camera_split_screen',
    'core/core_3d_picking',
    'core/core_automation_events',
    'core/core_basic_screen_manager',
    'core/core_basic_window',
    'core/core_basic_window_web',
    'core/core_custom_frame_control',
    'core/core_custom_logging',
    'core/core_drop_files',
    'core/core_input_gamepad',
    'core/core_input_gamepad_info',
    'core/core_input_gestures',
    'core/core_input_gestures_web',
    'core/core_input_keys',
    'core/core_input_mouse',
    'core/core_input_mouse_wheel',
    'core/core_input_multitouch',
    'core/core_input_virtual_controls',
    'core/core_loading_thread',
    'core/core_random_sequence',
    'core/core_random_values',
    'core/core_scissor_test',
    'core/core_smooth_pixelperfect',
    'core/core_storage_values',
    'core/core_vr_simulator',
    'core/core_window_flags',
    'core/core_window_letterbox',
    'core/core_window_should_close',
    'core/core_world_screen',
  ],
  'shapes': [
    'shapes/shapes_basic_shapes',
    'shapes/shapes_bouncing_ball',
    'shapes/shapes_collision_area',
    'shapes/shapes_colors_palette',
    'shapes/shapes_draw_circle_sector',
    'shapes/shapes_draw_rectangle_rounded',
    'shapes/shapes_draw_ring',
    'shapes/shapes_easings_ball_anim',
    'shapes/shapes_easings_box_anim',
    'shapes/shapes_easings_rectangle_array',
    'shapes/shapes_following_eyes',
    'shapes/shapes_lines_bezier',
    'shapes/shapes_logo_raylib',
    'shapes/shapes_logo_raylib_anim',
    'shapes/shapes_rectangle_scaling',
    'shapes/shapes_splines_drawing',
    'shapes/shapes_top_down_lights',
    'shapes/shapes_rectangle_advanced',
  ],
  'textures': [
    'textures/textures_background_scrolling',
    'textures/textures_blend_modes',
    'textures/textures_bunnymark',
    'textures/textures_draw_tiled',
    'textures/textures_fog_of_war',
    'textures/textures_gif_player',
    'textures/textures_image_channel',
    'textures/textures_image_drawing',
    'textures/textures_image_generation',
    'textures/textures_image_kernel',
    'textures/textures_image_loading',
    'textures/textures_image_processing',
    'textures/textures_image_rotate',
    'textures/textures_image_text',
    'textures/textures_logo_raylib',
    'textures/textures_mouse_painting',
    'textures/textures_npatch_drawing',
    'textures/textures_particles_blending',
    'textures/textures_polygon',
    'textures/textures_raw_data',
    'textures/textures_sprite_anim',
    'textures/textures_sprite_button',
    'textures/textures_sprite_explosion',
    'textures/textures_srcrec_dstrec',
    'textures/textures_textured_curve',
    'textures/textures_to_image',
  ],
  'text': [
    'text/text_codepoints_loading',
    'text/text_draw_3d',
    'text/text_font_filters',
    'text/text_font_loading',
    'text/text_font_sdf',
    'text/text_font_spritefont',
    'text/text_format_text',
    'text/text_input_box',
    'text/text_raylib_fonts',
    'text/text_rectangle_bounds',
    'text/text_unicode',
    'text/text_writing_anim',
  ],
  'models': [
    'models/models_animation',
    'models/models_billboard',
    'models/models_bone_socket',
    'models/models_box_collisions',
    'models/models_cubicmap',
    'models/models_draw_cube_texture',
    'models/models_first_person_maze',
    'models/models_geometric_shapes',
    'models/models_heightmap',
    'models/models_loading',
    'models/models_loading_gltf',
    'models/models_loading_m3d',
    'models/models_loading_vox',
    'models/models_mesh_generation',
    'models/models_mesh_picking',
    'models/models_orthographic_projection',
    'models/models_point_rendering',
    'models/models_rlgl_solar_system',
    'models/models_skybox',
    'models/models_waving_cubes',
    'models/models_yaw_pitch_roll',
    'models/models_gpu_skinning',
  ],
  'shaders': [
    'shaders/shaders_basic_lighting',
    'shaders/shaders_basic_pbr',
    'shaders/shaders_custom_uniform',
    'shaders/shaders_deferred_render',
    'shaders/shaders_eratosthenes',
    'shaders/shaders_fog',
    'shaders/shaders_hot_reloading',
    'shaders/shaders_hybrid_render',
    'shaders/shaders_julia_set',
    'shaders/shaders_lightmap',
    'shaders/shaders_mesh_instancing',
    'shaders/shaders_model_shader',
    'shaders/shaders_multi_sample2d',
    'shaders/shaders_palette_switch',
    'shaders/shaders_postprocessing',
    'shaders/shaders_raymarching',
    'shaders/shaders_shadowmap',
    'shaders/shaders_shapes_textures',
    'shaders/shaders_simple_mask',
    'shaders/shaders_spotlight',
    'shaders/shaders_texture_drawing',
    'shaders/shaders_texture_outline',
    'shaders/shaders_texture_tiling',
    'shaders/shaders_texture_waves',
    'shaders/shaders_write_depth',
    'shaders/shaders_vertex_displacement',
  ],
  'audio': [
    'audio/audio_mixed_processor',
    'audio/audio_module_playing',
    'audio/audio_music_stream',
    'audio/audio_raw_stream',
    'audio/audio_sound_loading',
    'audio/audio_sound_multi',
    'audio/audio_stream_effects',
  ],
  'others': [
    'others/easings_testbed',
    'others/embedded_files_loading',
    'others/raylib_opengl_interop',
    'others/raymath_vector_angle',
    'others/rlgl_compute_shader',
  ],
}

uses_raygui_incorrectly = [
  'shapes/shapes_draw_circle_sector',
  'shapes/shapes_draw_rectangle_rounded',
  'shapes/shapes_draw_ring',
  'shapes/shapes_splines_drawing',
]

example_compile_args = []

if target_platform == 'GLFW' or target_platform == 'SDL' or target_platform == 'RGFW'
  example_compile_args += '-DPLATFORM_DESKTOP'
endif

fs = import('fs')

# Detect if compiling in an MSYS2-based MinGW/Clang environment
host_is_msys2 = host_machine.system() == 'windows' and cc.get_argument_syntax() == 'gcc'

foreach category, files : examples_list

  example_inc_dirs = []

  if category == 'others'
    example_inc_dirs += include_directories('others/external/include')
  endif


  foreach file : files
    basename = fs.name(file)

    specific_compile_args = []

    if host_machine.system() == 'windows' and not host_is_msys2
      # detect wrong dllimport / dllexport declarations and therefore wrong build or public compile arguments
      if file in uses_raygui_incorrectly
        #some files use ragui, and that also uses the same defines (USE_LIBTYPE_SHARED and BUILD_LIBTYPE_SHARED) as raylib, so it clashes here, this needs to be removed, after upstream fixes this!
        specific_compile_args += '/wd4273'
      else
        specific_compile_args += '/we4273'
      endif
    endif


    # this example is not supported on windows
    if file == 'core/core_loading_thread' and host_machine.system() == 'windows'
      continue
    endif

    if file == 'others/raylib_opengl_interop'
      #this is needed, as this example doesn't include glad correctly
      specific_compile_args += '-DGLAD_GLAPI_EXPORT'
      #this is needed, as the hard copy of glad.h inside the examples/external folderincorrectly uses 'WIN32' instead of '_WIN32' as detection for windows
      if host_machine.system() == 'windows'
        specific_compile_args += '-DWIN32'
      endif
    endif


    executable(
      f'@category@ @basename@',
      files(f'@file@.c'),
      include_directories: example_inc_dirs,
      dependencies: [raylib_dep],
      c_args: example_compile_args + specific_compile_args,
    )
  endforeach
endforeach



# this example is special, therefore it is outside of the loop

#only avaibale if target_platform == GLFW
if target_platform == 'GLFW'
  special_compile_args = example_compile_args

  if host_machine.system() == 'windows' and not host_is_msys2
    # detect wrong dllimport / dllexport declarations and therefore wrong build or public compile arguments
    special_compile_args += '/we4273'
  endif

  executable(
    'others rlgl_standalone',
    files('others/rlgl_standalone.c'),
    include_directories: include_directories('others/external/include'),
    dependencies: _do_not_use_internal_glfw_dep,
    c_args: special_compile_args,
  )

endif
